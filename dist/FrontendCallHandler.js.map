{"version":3,"sources":["FrontendCallHandler.ts"],"names":["FrontendCallHandler","FrontendCallHandler.constructor","FrontendCallHandler.singleton","FrontendCallHandler.stateless","FrontendCallHandler.getRegistry","FrontendCallHandler.execute","FrontendCallHandler.log"],"mappings":"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","file":"FrontendCallHandler.js","sourcesContent":["/// <reference path=\"Registry.ts\" />\n/// <reference path=\"JsonRpc.ts\" />\nimport reg = require('./Registry');\nimport jrpc = require('./JsonRpc');\n\nexport var DEBUG:boolean = false;\n\nexport module api {\n\texport interface IFrontendCallHandler {\n\t\tsingleton(instanceName:string, classNames:any);\n\t\tstateless(instanceName:string, classNames:any);\n\t\tgetRegistry(instanceName:string): reg.api.IRPCRegistry;\n\n\t\texecute(client:WebSocket, instance:string, method:string, params:JSON, id:string);\n\t}\n}\n\nexport class FrontendCallHandler implements api.IFrontendCallHandler {\n\n    private _singleton:reg.ObjectRegistry;\n    private _stateless:reg.ClassRegistry;\n    private _names:{ [name: string]: Object };\n\n    constructor() {\n        this._names = {};\n        this._singleton = new reg.ObjectRegistry();\n        this._stateless = new reg.ClassRegistry();\n    }\n\n    public singleton(instanceName:string, classNames:any) {\n        this._names[instanceName] = this._singleton;\n        this._singleton.register(instanceName, classNames);\n    }\n\n    public stateless(instanceName:string, classNames:any) {\n        this._names[instanceName] = this._stateless;\n        this._stateless.register(instanceName, classNames);\n    }\n\n    public getRegistry(instanceName:string):reg.api.IRPCRegistry {\n        if (this._names[instanceName] === this._singleton) {\n            return this._singleton;\n        }\n        else if (this._names[instanceName] === this._stateless) {\n            return this._stateless;\n        }\n        return null;\n    }\n\n    public execute(client:WebSocket, instance:string, method:string, params:JSON, id:string) {\n        if (this._names[instance]) {\n            var registry:reg.api.IRPCRegistry = null;\n            if (this._names[instance] === this._singleton) {\n                registry = this._singleton;\n            }\n            else if (this._names[instance] === this._stateless) {\n                registry = this._stateless;\n            }\n            try {\n                var result:JSON = registry.invoke(instance, method, params);\n                client.send(JSON.stringify(jrpc.RPC.Response(id, result)));\n            } catch (err) {\n                console.warn('RPC frontend call \"' + instance + '.' + method + '\" fail.');\n                FrontendCallHandler.log('>>FrontendCallHandler ' + JSON.stringify(jrpc.RPC.Error('Error', jrpc.RPC.INTERNAL_ERROR,\n                        'RPC frontend call \"' + instance + '.' + method + '\" fail.')));\n                client.send(JSON.stringify(jrpc.RPC.Error('Error:' + id, jrpc.RPC.INTERNAL_ERROR,\n                    'RPC frontend call \"' + instance + '.' + method + '\" fail.')));\n            }\n        }\n        else {\n            client.send(\n                JSON.stringify(\n                    jrpc.RPC.Error('Error:' + id, jrpc.RPC.METHOD_NOT_FOUND, 'RPC frontend instance named ' + instance + ' not' +\n                        ' found.')\n                )\n            );\n        }\n    }\n\n    public static log(...args:any[]) {\n        if (DEBUG) {\n            console.debug.apply(console, args);\n        }\n    }\n}\n"],"sourceRoot":"/source/"}