{"version":3,"sources":["JsonRpc.ts"],"names":["RPC","RPC.constructor","RPC.isError","RPC.isRequest","RPC.isResponse","RPC.getCode","RPC.getErrorMessage","RPC.getResult","RPC.getParams","RPC.isBroadcast","RPC.getMethod","RPC.getInstance","RPC.getId","RPC.Response","RPC.Request","RPC.Error"],"mappings":"AAAA,IAAa,GAAG;IAUZA,SAVSA,GAAGA,CAUAA,GAAGA;QACXC,EAAEA,CAACA,CAACA,GAAGA,CAACA,OAAOA,KAAKA,KAAKA,CAACA,CAACA,CAACA;YACxBA,MAAMA,wBAAwBA,CAACA;QACnCA,CAACA;QACDA,IAAIA,CAACA,GAAGA,GAAGA,GAAGA,CAACA,EAAEA,CAACA;QAClBA,IAAIA,CAACA,UAAUA,GAAGA,KAAKA,CAACA;QACxBA,EAAEA,CAACA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA,CAACA;YACZA,IAAIA,CAACA,KAAKA,GAAGA,GAAGA,CAACA,KAAKA,CAACA,IAAIA,CAACA;YAC5BA,IAAIA,CAACA,QAAQA,GAAGA,GAAGA,CAACA,KAAKA,CAACA,OAAOA,CAACA;QACtCA,CAACA;QACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,CAACA,CAACA;YAClBA,IAAIA,CAACA,OAAOA,GAAGA,GAAGA,CAACA,MAAMA,CAACA;YAC1BA,IAAIA,CAACA,GAAGA,GAAGA,CAACA,MAAMA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;YAC9BA,EAAEA,CAACA,CAACA,CAACA,CAACA,MAAMA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAChBA,IAAIA,CAACA,YAAYA,GAAGA,CAACA,CAACA,CAACA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA;gBACpCA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,KAAKA,YAAYA,CAACA,CAACA,CAACA;oBACtCA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA;oBACvBA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAC7CA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBACJA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA,CAACA,CAAC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","file":"JsonRpc.js","sourcesContent":["export class RPC {\n    _code: number;\n    _message: string;\n    _id: string;\n    _broadcast: boolean;\n    _namedMethod: string;\n    _namedInstance: string;\n    _result: JSON;\n    _params: JSON;\n\n    constructor(rpc) {\n        if (rpc.jsonrpc !== '2.0') {\n            throw 'Json-RPC Message Error';\n        }\n        this._id = rpc.id;\n        this._broadcast = false;\n        if (rpc.error) {\n            this._code = rpc.error.code;\n            this._message = rpc.error.message;\n        }\n        else if (rpc.method) {\n            this._params = rpc.params;\n            var t = rpc.method.split('.');\n            if (t.length == 2) {\n                this._namedMethod = t[t.length - 1];\n                if (t[0].split('}')[0] === '{broadcast') {\n                    this._broadcast = true;\n                    this._namedInstance = t[0].split('}')[1];\n                } else {\n                    this._namedInstance = t[0];\n                }\n            } else {\n                throw 'RPC Parse error';\n            }\n        }\n        else {\n            this._result = rpc.result;\n        }\n    }\n\n    isError(): boolean {\n        return (this._code !== undefined);\n    }\n\n    isRequest(): boolean {\n        return (this._namedMethod !== undefined);\n    }\n\n    isResponse(): boolean {\n        return (this._result !== undefined);\n    }\n\n    getCode(): number {\n        return this._code;\n    }\n\n    getErrorMessage(): string {\n        return this._message;\n    }\n\n    getResult(): JSON {\n        return this._result;\n    }\n\n    getParams(): JSON {\n        return this._params;\n    }\n\n    isBroadcast(): boolean {\n        return this._broadcast;\n    }\n\n    getMethod(): string {\n        return this._namedMethod;\n    }\n\n    getInstance(): string {\n        return this._namedInstance;\n    }\n\n    getId(): string {\n        return this._id;\n    }\n\n\tpublic static VERSION: string = '2.0';\n\tpublic static PARSE_ERROR: number = -32700;\n\tpublic static INVALID_REQUEST: number = -32600;\n\tpublic static METHOD_NOT_FOUND: number = -32601;\n\tpublic static INVALID_PARAMS: number = -32602;\n\tpublic static INTERNAL_ERROR: number = -32603;\n\n\tpublic static Response(id:string, result?:JSON) {\n\t\treturn {\n\t\t\t'jsonrpc': RPC.VERSION,\n\t\t\t'result': (result) ? result : null,\n\t\t\t'id': (id) ? id : null\n\t\t}\n\t}\n\n\tpublic static Request(id:string, method:string, data?:JSON) {\n\t\treturn {\n\t\t\t'jsonrpc': RPC.VERSION,\n\t\t\t'method': method,\n\t\t\t'params': data,\n\t\t\t'id': (id) ? id : null\n\t\t};\n\t}\n\n\tpublic static Error(id:string, code:number, message:string) {\n\t\treturn {\n\t\t\t'jsonrpc': RPC.VERSION,\n\t\t\t'error': {\n\t\t\t\t'code': code,\n\t\t\t\t'message' : message\n\t\t\t},\n\t\t\t'id': (id) ? id : null\n\t\t};\n\t}\n}"],"sourceRoot":"/source/"}